// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WorldCup.App.Data;

namespace WorldCup.App.Migrations
{
    [DbContext(typeof(WorldCupContext))]
    [Migration("20180614090320_AddPointsModel")]
    partial class AddPointsModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rc1-32029")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WorldCup.App.Data.Bet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AwayGoals");

                    b.Property<int?>("AwayGoalsInExtraTime");

                    b.Property<int>("AwayGoalsInFirstHalf");

                    b.Property<int?>("AwayPenatly");

                    b.Property<Guid>("BetId");

                    b.Property<bool>("HasExtraTime");

                    b.Property<bool>("HasPenatly");

                    b.Property<int>("HomeGoals");

                    b.Property<int?>("HomeGoalsInExtraTime");

                    b.Property<int>("HomeGoalsInFirstHalf");

                    b.Property<int?>("HomePenatly");

                    b.Property<Guid?>("MatchId");

                    b.Property<Guid?>("ResultId");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("ResultId");

                    b.HasIndex("UserId");

                    b.ToTable("Bets");
                });

            modelBuilder.Entity("WorldCup.App.Data.Match", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AwayTeamId");

                    b.Property<DateTime>("Date");

                    b.Property<Guid?>("HomeTeamId");

                    b.Property<Guid?>("ResultId");

                    b.Property<DateTime>("TimeStamp");

                    b.HasKey("Id");

                    b.HasIndex("AwayTeamId");

                    b.HasIndex("HomeTeamId");

                    b.HasIndex("ResultId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("WorldCup.App.Data.PointHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("TimeStamp");

                    b.HasKey("Id");

                    b.ToTable("PointHistories");
                });

            modelBuilder.Entity("WorldCup.App.Data.PointPolicy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Applied");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<Guid?>("PointResultId");

                    b.Property<int?>("Points");

                    b.Property<int>("PolicyType");

                    b.Property<DateTime>("TimeStamp");

                    b.HasKey("Id");

                    b.HasIndex("PointResultId");

                    b.ToTable("PointPolicies");
                });

            modelBuilder.Entity("WorldCup.App.Data.PointResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AddedPoints");

                    b.Property<Guid?>("PointHistoryId");

                    b.Property<int>("SumPoints");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("PointHistoryId");

                    b.HasIndex("UserId");

                    b.ToTable("PointResults");
                });

            modelBuilder.Entity("WorldCup.App.Data.Result", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AwayGoals");

                    b.Property<int?>("AwayGoalsInExtraTime");

                    b.Property<int>("AwayGoalsInFirstHalf");

                    b.Property<int?>("AwayPenatly");

                    b.Property<bool>("HasExtraTime");

                    b.Property<bool>("HasPenatly");

                    b.Property<int>("HomeGoals");

                    b.Property<int?>("HomeGoalsInExtraTime");

                    b.Property<int>("HomeGoalsInFirstHalf");

                    b.Property<int?>("HomePenatly");

                    b.Property<DateTime>("TimeStamp");

                    b.HasKey("Id");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("WorldCup.App.Data.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("ShortName");

                    b.Property<DateTime>("TimeStamp");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("WorldCup.App.Data.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Points");

                    b.Property<DateTime>("TimeStamp");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WorldCup.App.Data.Bet", b =>
                {
                    b.HasOne("WorldCup.App.Data.Match", "Match")
                        .WithMany("Bets")
                        .HasForeignKey("MatchId");

                    b.HasOne("WorldCup.App.Data.PointResult", "Result")
                        .WithMany()
                        .HasForeignKey("ResultId");

                    b.HasOne("WorldCup.App.Data.User")
                        .WithMany("Bets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WorldCup.App.Data.Match", b =>
                {
                    b.HasOne("WorldCup.App.Data.Team", "AwayTeam")
                        .WithMany()
                        .HasForeignKey("AwayTeamId");

                    b.HasOne("WorldCup.App.Data.Team", "HomeTeam")
                        .WithMany()
                        .HasForeignKey("HomeTeamId");

                    b.HasOne("WorldCup.App.Data.Result", "Result")
                        .WithMany()
                        .HasForeignKey("ResultId");
                });

            modelBuilder.Entity("WorldCup.App.Data.PointPolicy", b =>
                {
                    b.HasOne("WorldCup.App.Data.PointResult")
                        .WithMany("PointPolicies")
                        .HasForeignKey("PointResultId");
                });

            modelBuilder.Entity("WorldCup.App.Data.PointResult", b =>
                {
                    b.HasOne("WorldCup.App.Data.PointHistory")
                        .WithMany("PointResults")
                        .HasForeignKey("PointHistoryId");

                    b.HasOne("WorldCup.App.Data.User", "User")
                        .WithMany("PointResults")
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
